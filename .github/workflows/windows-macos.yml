name: WindowsMacOS

on:
  push:
    branches:
    - full
    - release/[0-9]+.[0-9]+
    tags:
    - v[0-9]+.[0-9]+.[0-9]+\+full
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  repository_dispatch:
    types: [public_build]
  workflow_dispatch:

env:
  HEAD_REF: ci${{ github.run_id }}
  RUN_URL: "${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET: multipass-ci

jobs:
  # This job is here so that the Windows and macOS builds share exactly the same
  # git tree (including the merge of public), and as a result have the same version
  # numbers.
  Checkout:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        # Need to check it all out to merge successfully.
        fetch-depth: 0

    - name: Fetch the dispatching ref
      if: ${{ github.event_name == 'repository_dispatch' }}
      run: |
        # Try and fetch the matching branch.
        if [ -n "${{ github.event.client_payload.head_ref }}" ] && git fetch origin ${{ github.event.client_payload.head_ref }}; then
          echo "::set-output name=ref::${{ github.event.client_payload.head_ref }}"
        else
          # Otherwise fetch the triggering commit.
          git -c protocol.version=2 fetch --prune --progress --no-recurse-submodules ${{ github.event.client_payload.repositoryUrl }} ${{ github.event.client_payload.sha }}
          echo "::set-output name=ref::${{ github.event.client_payload.ref }}"
        fi

    - name: Merge the dispatching ref
      if: ${{ github.event_name == 'repository_dispatch' }}
      run: |
        git config user.name "Multipass CI Bot"
        git config user.email "multipass-ci-bot@canonical.com"
        git merge FETCH_HEAD -m "Automatic merge of ${{ github.event.client_payload.ref }}@$( git rev-parse --short FETCH_HEAD )"

    - name: Create the branch
      run: git branch ${{ env.HEAD_REF }}

    - name: Remove authentication
      run: git config --local http.https://github.com/.extraheader ""

    - name: Upload the repository
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.HEAD_REF }}.git
        path: .git/**
        if-no-files-found: error

  Lint:
    needs: Checkout
    runs-on: ubuntu-latest

    if: ${{ github.event_name != 'push' }}

    steps:
    - name: Retrieve the repository
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.HEAD_REF }}.git
        path: .git

    - name: Check out the code
      run: |
        git checkout --progress --force ${{ env.HEAD_REF }}

    - name: Run clang-format through the diff
      uses: ./.github/actions/lint

  GetMatrix:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
    - name: Determine build matrix
      id: set-matrix
      run: |
        MATRIX='{"include": ['
        [[ '${{ github.event.pull_request.draft }}' != 'true' && '${{ github.event.client_payload.draft }}' != 'true' ]] && MATRIX+='{"runs-on": "windows-latest"},'
        MATRIX+='{"runs-on": "multipass-macos-10.14"}'
        MATRIX+=']}'
        echo "::set-output name=matrix::${MATRIX}"

  BuildAndTest:
    needs: [Checkout, Lint, GetMatrix]

    strategy:
      matrix: ${{ fromJSON(needs.GetMatrix.outputs.matrix) }}

    # Need to explicitly continue on Lint getting skipped.
    if: ${{ !failure() && !cancelled() && needs.Checkout.result == 'success' }}

    runs-on: ${{ matrix.runs-on }}

    env:
      BUILD_DIR: build
      MACOSX_DEPLOYMENT_TARGET: "10.14"
      OPAM_COMP: "4.11.1"
      OPAMVERBOSE: 1
      OPAMYES: 1
      HOMEBREW_NO_AUTO_UPDATE: 1

    steps:
    - name: Create an App token
      id: app-token
      if: ${{ github.event_name == 'repository_dispatch' }}
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.APP_ID }}
        private_key: ${{ secrets.APP_PRIVATE_KEY }}
        repository: ${{ github.event.client_payload.repository }}

    - name: Create a check on public
      id: public-check
      if: ${{ github.event_name == 'repository_dispatch' }}
      uses: LouisBrunner/checks-action@v1.1.1
      with:
        token: ${{ steps.app-token.outputs.token }}
        repo: ${{ github.event.client_payload.repository }}
        sha: ${{ github.event.client_payload.head_sha }}
        name: ${{ runner.os }}
        status: in_progress
        details_url: ${{ env.RUN_URL }}

    - name: Retrieve the repository
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.HEAD_REF }}.git
        path: .git

    - name: Enable symlinks
      run: git config --local core.symlinks true

    - name: Check out the code
      # This can't be easily abstracted into our `checkout` action due to a chicken'n'egg problem:
      # GitHub reads ./* actions from $PWD, so it needs to be checked out. It could be extracted
      # into an external repository, but that would bring its own set of issues.
      # Authenticate with the new token.
      run: |
        ${{ format('git config --local http.https://github.com/.extraheader "AUTHORIZATION: basic $( {0} )"',
                   format(runner.os != 'Windows' && 'echo -n x-access-token:{0} | base64' || '[Convert]::ToBase64String([System.Text.Encoding]::Ascii.GetBytes(''x-access-token:{0}''))', secrets.GITHUB_TOKEN ))
        }}
        git checkout --progress --force ${{ env.HEAD_REF }}

    - name: Check out submodules and fetch tags
      uses: ./.github/actions/checkout

    - name: Determine build parameters
      id: build-params
      uses: ./.github/actions/build-params

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        setup-python: false
        aqtversion: ==1.2.0
      timeout-minutes: 10

    - name: Set up caching
      if: ${{ runner.os == 'macOS' }}
      id: cache-params
      run: |
        # Use gnu-tar instead of the system tar
        echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> ${GITHUB_PATH}
        echo "::set-output name=hyperkit-sha::$( git -C 3rd-party/hyperkit rev-parse HEAD )"

    - name: Install dependencies from brew
      if: ${{ runner.os == 'macOS' }}
      run: |
        brew install \
          cmake \
          coreutils \
          git \
          gnu-tar \
          libev \
          libffi \
          ninja \
          openssl@1.1 \
          pkg-config \
          python \
          wget

    - name: Cleanup
      if: ${{ always() && runner.os == 'macOS' }}
      uses: canonical/actions/cleanup@release
      with:
        # remove everything in the workspace and the dependencies
        paths: |
          ${{ env.Qt5_DIR }}
          ~/.opam
          ~/Library/Caches/ccache
          ${{ env.BUILD_DIR }}
          ${{ github.workspace }}

    - name: Cache OPAM
      if: ${{ runner.os == 'macOS' }}
      uses: actions/cache@v2
      with:
        path: "~/.opam"
        # Use OPAM version and hyperkit sha as cache key. This ensures that when we change hyperkit,
        # any dependency changes will follow. Also start from scratch if OPAM, macOS or hyperkit versions change.
        key: opam-${{ env.OPAM_COMP }}-${{ runner.os }}-${{ env.MACOSX_DEPLOYMENT_TARGET }}-${{ steps.cache-params.outputs.hyperkit-sha }}

    - name: Set up OCaml
      if: ${{ runner.os == 'macOS' }}
      uses: avsm/setup-ocaml@v1.1.7
      with:
        ocaml-version: ${{ env.OPAM_COMP }}

    - name: Set up OPAM environment
      if: ${{ runner.os == 'macOS' }}
      id: opam-setup
      run: |
        for var in OPAM_SWITCH_PREFIX CAML_LD_LIBRARY_PATH OCAML_TOPLEVEL_PATH; do
            opam exec -- bash -c "echo ${var}=\${${var}}" >> ${GITHUB_ENV}
        done
        opam exec -- bash -c "echo \${OPAM_SWITCH_PREFIX}/bin" >> ${GITHUB_PATH}

    - name: Install OPAM dependencies
      if: ${{ runner.os == 'macOS' }}
      run: |
        opam install 3rd-party/hyperkit --deps-only
        opam list

    - name: Set up CCache
      if: ${{ runner.os == 'macOS' }}
      id: setup-ccache
      run: |
        brew install ccache
        ccache --max-size=400M

        # Find common base between full and HEAD to use as cache key.
        git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules origin full
        echo "::set-output name=key::$( git merge-base origin/full ${{ github.sha }} )"

    - name: CCache
      if: ${{ runner.os == 'macOS' }}
      uses: actions/cache@v2
      with:
        key: ccache-${{ runner.os }}-${{ env.MACOSX_DEPLOYMENT_TARGET }}-${{ steps.setup-ccache.outputs.key }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ env.MACOSX_DEPLOYMENT_TARGET }}-
        path: "~/Library/Caches/ccache"

    - name: Install Dependencies from Choco
      if: ${{ runner.os == 'Windows' }}
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install --yes qemu-img openssl

    - name: Set up MSVC
      if: ${{ runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@v1

    - name: Build
      uses: lukka/run-cmake@v2
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeBuildType: RelWithDebInfo
        buildDirectory: ${{ env.BUILD_DIR }}
        cmakeAppendedArgs:
          -GNinja
          -DCMAKE_BUILD_TYPE=RelWithDebInfo
          -DCMAKE_PREFIX_PATH=${{ env.Qt5_Dir }}
          -DMULTIPASS_UPSTREAM=origin
          -DMULTIPASS_BUILD_LABEL=${{ steps.build-params.outputs.label }}
          ${{ runner.os == 'Windows' && '-DCMAKE_C_COMPILER=cl.exe -DCMAKE_CXX_COMPILER=cl.exe' || '' }}
          ${{ runner.os == 'macOS' && '-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache' || '' }}

    - name: Clear CCache stats
      if: ${{ runner.os == 'macOS' }}
      run: ccache --show-stats --zero-stats

    - name: Test
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        bin/multipass_tests

    - name: Package
      id: cmake-package
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        cmake --build . --target package
        echo "::set-output name=name::$( ${{ runner.os != 'Windows' && 'basename *.pkg' || '( Get-ChildItem multipass-*.exe ).Name' }} ) "
        echo "::set-output name=path::$( ${{ runner.os != 'Windows' && 'greadlink -f *.pkg' || '( Get-ChildItem multipass-*.exe ).FullName' }} )"

    - name: Get package logs
      if: ${{ failure() && steps.cmake-package.outcome == 'failure' }}
      run: ${{ format('cat {0}/_CPack_Packages/{1}', env.BUILD_DIR, runner.os == 'Windows' && 'win64/NSIS/NSISOutput.log' || 'Darwin/productbuild/InstallOutput.log') }}

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.cmake-package.outputs.name }}
        path: ${{ steps.cmake-package.outputs.path }}
        if-no-files-found: error

    # Put the package on S3 for public consumption
    - name: Publish package on S3
      id: s3-upload
      uses: canonical/actions/s3-upload@release
      with:
        path: ${{ steps.cmake-package.outputs.path }}
        bucket: ${{ env.S3_BUCKET }}
        prefix: ${{ steps.build-params.outputs.label }}
        public: true
        storage-class: ONEZONE_IA
      timeout-minutes: 5

    # This shows up on this run's page
    - name: Report public URL
      run: |
        echo "##[warning] Public URL: ${{ steps.s3-upload.outputs.url }}"

    - name: Create an App token
      # The token in app-token expires after an hour, and a full macOS build
      # (including bors and ocaml setup) may take more than that, so need to
      # get a new one. This would probably be better integrated into the check
      # action itself.
      id: app-token-update
      if: ${{ always() && github.event_name == 'repository_dispatch' }}
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.APP_ID }}
        private_key: ${{ secrets.APP_PRIVATE_KEY }}
        repository: ${{ github.event.client_payload.repository }}

    # On success, link to the package on the public side
    - name: Update the check on public
      if: ${{ github.event_name == 'repository_dispatch' }}
      uses: LouisBrunner/checks-action@v1.1.1
      with:
        token: ${{ steps.app-token-update.outputs.token }}
        repo: ${{ github.event.client_payload.repository }}
        sha: ${{ github.event.client_payload.head_sha }}
        check_id: ${{ steps.public-check.outputs.check_id }}
        conclusion: ${{ job.status }}
        output: |
          {
             "summary": "${{ runner.os }} build successful",
             "text_description": "[${{ steps.cmake-package.outputs.name }}](${{ steps.s3-upload.outputs.url }})"
          }

    # On failure, just report the failure
    - name: Update the check on public
      if: ${{ !success() && github.event_name == 'repository_dispatch' }}
      uses: LouisBrunner/checks-action@v1.1.1
      with:
        token: ${{ steps.app-token-update.outputs.token }}
        repo: ${{ github.event.client_payload.repository }}
        sha: ${{ github.event.client_payload.head_sha }}
        check_id: ${{ steps.public-check.outputs.check_id }}
        conclusion: ${{ job.status }}

    - name: Dispatch integration tests
      if: ${{ github.event.client_payload.dispatch_ci == 'true' }}
      uses: Saviq/workflow-dispatch@dist
      with:
        token: ${{ secrets.PRIVATE_GITHUB_TOKEN }}
        repo: ${{ github.event.client_payload.repository }}
        ref: ${{ github.event.client_payload.ref }}
        sha: ${{ github.event.client_payload.sha }}
        workflow: Integration
        inputs: |
          {
            "${{ runner.os == 'macOS' && 'mac-' || 'win-' }}package": "${{ steps.s3-upload.outputs.url }}"
          }
      # This action will fail if `ref` moved on from `sha` to avoid mistargeting Integration runs.
      continue-on-error: true
