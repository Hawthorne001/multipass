name: Windows

on:
  push:
    branches:
    - full
    - release/[0-9]+.[0-9]+
    tags:
    - v[0-9]+.[0-9]+.[0-9]+\+full
  pull_request:
  repository_dispatch:
    types: [public_build]
  workflow_dispatch:

env:
  HEAD_REF: ci${{ github.run_id }}

jobs:
  Checkout:
    if: ${{ ! github.event.pull_request.draft }}
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        # Need to check it all out to merge successfully.
        fetch-depth: 0

    - name: Fetch the dispatching ref
      if: ${{ github.event_name == 'repository_dispatch' }}
      run: |
        # Try and fetch the matching branch.
        if [ -n "${{ github.event.client_payload.head_ref }}" && git fetch origin ${{ github.event.client_payload.head_ref }}; then
          echo "::set-output name=ref::${{ github.event.client_payload.head_ref }}"
        else
          # Otherwise fetch the triggering commit.
          git -c protocol.version=2 fetch --prune --progress --no-recurse-submodules ${{ github.event.client_payload.repositoryUrl }} ${{ github.event.client_payload.sha }}
          echo "::set-output name=ref::${{ github.event.client_payload.ref }}"
        fi

    - name: Merge the dispatching ref
      if: ${{ github.event_name == 'repository_dispatch' }}
      run: |
        git config user.name "Multipass CI Bot"
        git config user.email "multipass-ci-bot@canonical.com"
        git merge FETCH_HEAD -m "Automatic merge of ${{ github.event.client_payload.ref }}@$( git rev-parse --short FETCH_HEAD )"

    - name: Create the branch
      run: git branch ${{ env.HEAD_REF }}

    - name: Remove authentication
      run: git config --local http.https://github.com/.extraheader ""

    - name: Upload the repository
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.HEAD_REF }}.git
        path: .git/**
        if-no-files-found: error

  Lint:
    needs: Checkout
    runs-on: ubuntu-latest

    if: ${{ github.event_name != 'push' }}

    steps:
    - name: Retrieve the repository
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.HEAD_REF }}.git
        path: .git

    - name: Check out the code
      run: |
        git checkout --progress --force ${{ env.HEAD_REF }}

    - name: Run clang-format through the diff
      uses: ./.github/actions/lint

  BuildAndTest:
    needs: [Checkout, Lint]
    # Need to explicitly continue on Lint getting skipped.
    if: ${{ needs.Checkout.result == 'success' }}

    runs-on: windows-latest

    env:
      BUILD_DIR: ../build

    steps:
    - name: Retrieve the repository
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.HEAD_REF }}.git
        path: .git

    - name: Enable symlinks
      run: git config --local core.symlinks true

    - name: Check out the code
      run: |
        # Authenticate with the new token.
        git config --local http.https://github.com/.extraheader "AUTHORIZATION: basic $( [Convert]::ToBase64String([System.Text.Encoding]::Ascii.GetBytes('x-access-token:${{ secrets.GITHUB_TOKEN }}')) )"
        git checkout --progress --force ${{ env.HEAD_REF }}

    - name: Check out submodules and fetch tags
      uses: ./.github/actions/checkout

    - name: Determine build parameters
      id: build-params
      uses: ./.github/actions/build-params

    - name: Install Qt
      uses: jurplel/install-qt-action@v2

    - name: Install Dependencies from Choco
      uses: crazy-max/ghaction-chocolatey@v1.3.0
      with:
        args: install --yes qemu-img

    - name: Download OpenSSL
      uses: carlosperate/download-file-action@v1.0.3
      with:
        file-url: http://wiki.overbyte.eu/arch/openssl-1.1.1c-win64.zip
        file-name: openssl.zip
        location: ${{ github.workspace }}/../

    - name: Unpack OpenSSL
      run: 7z x -o"openssl-1.1.1c-win64" ../openssl.zip

    - name: Download YASM
      uses: carlosperate/download-file-action@v1.0.3
      with:
        file-url: https://www.tortall.net/projects/yasm/releases/yasm-1.3.0-win64.exe
        file-name: yasm.exe
        location: ${{ github.workspace }}/../

    - name: Set up MSVC
      uses: ilammy/msvc-dev-cmd@v1.3.0

    - name: Build
      uses: lukka/run-cmake@v2
      env:
        ASM_NASM: "${{ github.workspace }}\\..\\yasm.exe"
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeBuildType: RelWithDebInfo
        buildDirectory: ${{ env.BUILD_DIR }}
        cmakeAppendedArgs:
          -GNinja
          -DCMAKE_C_COMPILER=cl.exe
          -DCMAKE_CXX_COMPILER=cl.exe
          -DMULTIPASS_UPSTREAM=origin
          -DMULTIPASS_BUILD_LABEL=${{ steps.build-params.outputs.label }}

    - name: Test
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        bin/multipass_tests.exe
      continue-on-error: true

    - name: Package
      id: cmake-package
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        cmake --build . --target package
        echo "::set-output name=name::$( ( Get-ChildItem multipass-*.exe ).Name )"
        echo "::set-output name=path::$( ( Get-ChildItem multipass-*.exe ).FullName )"

    - name: Get NSIS logs
      if: ${{ failure() && steps.cmake-package.outcome == 'failure' }}
      run: cat ${{ env.BUILD_DIR }}/_CPack_Packages/win64/NSIS/NSISOutput.log

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.cmake-package.outputs.name }}
        path: ${{ steps.cmake-package.outputs.path }}
        if-no-files-found: error
