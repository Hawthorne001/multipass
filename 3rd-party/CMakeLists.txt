# Workaround for zlib placing its generated zconf.h file in the build dir,
# and protobuf not knowing so finding the system version instead
include_directories(${CMAKE_BINARY_DIR}/3rd-party/grpc/third_party/zlib)

if (MSVC)
  add_compile_options(-wd5045) #Disable warning about Spectre mitigation
endif()

# Add the subdir here to avoid polluting their cmake scope
add_subdirectory(grpc EXCLUDE_FROM_ALL)

# Generates gRPC and protobuf C++ sources and headers from the given .proto files
#
# generate_grpc_cpp (<SRCS> <DEST> [<ARGN>...])
#
#  SRCS - output list of autogenerated source files
#  DEST - the output directory where the autogenerated files will be created in
#  ARGN - the .proto files
#
function(generate_grpc_cpp SRCS DEST)
  if (NOT ARGN)
    message(SEND_ERROR "Error: generate_grpc_cpp() called without any proto files")
    return()
  endif ()

  set(${SRCS})
  foreach (FIL ${ARGN})
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(FIL_WE ${FIL} NAME_WE)
    get_filename_component(FIL_DIR ${ABS_FIL} DIRECTORY)

    list(APPEND ${SRCS} "${DEST}/${FIL_WE}.grpc.pb.cc")
    list(APPEND HDRS "${DEST}/${FIL_WE}.grpc.pb.h")
    list(APPEND ${SRCS} "${DEST}/${FIL_WE}.pb.cc")
    list(APPEND HDRS "${DEST}/${FIL_WE}.pb.h")

    add_custom_command(
      OUTPUT "${DEST}/${FIL_WE}.grpc.pb.cc"
      "${DEST}/${FIL_WE}.grpc.pb.h"
      "${DEST}/${FIL_WE}.pb.cc"
      "${DEST}/${FIL_WE}.pb.h"
      COMMAND $<TARGET_FILE:protoc>
      ARGS --grpc_out=${DEST} --cpp_out=${DEST} --proto_path=${FIL_DIR} --plugin=protoc-gen-grpc=$<TARGET_FILE:grpc_cpp_plugin> ${ABS_FIL}
      DEPENDS ${ABS_FIL} protoc grpc_cpp_plugin
      COMMENT "Running gRPC C++ protocol buffer compiler on ${FIL}"
      VERBATIM)
  endforeach ()

  set_source_files_properties(${${SRCS}} ${HDRS} PROPERTIES GENERATED TRUE)
  # Also protobuf uses a compiler extension (namely extended-offsetof), which -Wall can warn about
  # See https://github.com/google/protobuf/issues/1947
  CHECK_CXX_COMPILER_FLAG("-Wno-extended-offsetof" COMPILER_SUPPORTS_NO_EXT_OFFSETOF)
  if(COMPILER_SUPPORTS_NO_EXT_OFFSETOF)
    set_source_files_properties(${${SRCS}} PROPERTIES COMPILE_FLAGS "-Wno-extended-offsetof")
  endif()
  set(${SRCS} ${${SRCS}} PARENT_SCOPE)
endfunction()

add_library(gRPC INTERFACE)

target_include_directories(gRPC INTERFACE
  ${CMAKE_CURRENT_SOURCE_DIR}/grpc/include
  ${CMAKE_CURRENT_SOURCE_DIR}/grpc/third_party/protobuf/src)

target_link_libraries(gRPC INTERFACE
  grpc++
  libprotobuf
  zlibstatic)

if (NOT MSVC)
  target_compile_options(gRPC INTERFACE "-Wno-unused-parameter")
endif ()

# YAML C++
# Disable tests here to avoid double-including gtest
option(YAML_CPP_BUILD_TOOLS OFF)
option(YAML_CPP_BUILD_CONTRIB OFF)
option(YAML_CPP_BUILD_TESTS OFF)

add_subdirectory(yaml-cpp EXCLUDE_FROM_ALL)

add_library(yaml INTERFACE)

target_include_directories(yaml INTERFACE
  ${CMAKE_CURRENT_SOURCE_DIR}/yaml-cpp/include)

target_link_libraries(yaml INTERFACE
  yaml-cpp)

if (APPLE)
  # Hyperkit - MacOS virtualization (via xhyve)
  if(NOT DEFINED ENV{OCAML_TOPLEVEL_PATH})
    message(FATAL_ERROR "The OCaml OPAM environment has not been set. Run 'eval `opam config env`' or check the README")
  endif()

  # Warning! Hyperkit happily builds with QCow2 support disabled if it is not available, need to avoid this
  execute_process(
    COMMAND ocamlfind query qcow
    OUTPUT_VARIABLE QCOW_SUPPORT_OUT
    RESULT_VARIABLE QCOW_SUPPORT_FOUND
    OUTPUT_QUIET
    )

  if (NOT QCOW_SUPPORT_FOUND EQUAL 0)
    message(FATAL_ERROR "The 'qcow' package of the OPAM OCaml system is required. Check the README\nThe command 'ocamlfind query qcow' returned: ${QCOW_SUPPORT_OUT}")
  endif ()

  # Need to patch hyperkit Makefile, see moby/hyperkit#274
  include(ExternalProject)
  ExternalProject_Add(hyperkit
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/hyperkit"
    CONFIGURE_COMMAND sed -i .bup s/cstruct\\.lwt/cstruct-lwt/ <SOURCE_DIR>/Makefile
    BUILD_COMMAND make
    BUILD_IN_SOURCE 1
    INSTALL_COMMAND cp "${CMAKE_CURRENT_SOURCE_DIR}/hyperkit/build/hyperkit" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}"
    TEST_COMMAND "" # make test is available, but quite heavy-weight (download a VM & needs root)
    )

  install(PROGRAMS "${CMAKE_CURRENT_SOURCE_DIR}/hyperkit/build/hyperkit"
    DESTINATION bin
    COMPONENT multipassd
    )


  # Qemu-img - Fetch binary and libraries needed
  set(QEMU_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/qemu-img-osx)
  set(QEMU_BINARY_DIR ${CMAKE_BINARY_DIR}/3rd-party/qemu-img-osx)
  add_custom_command(
    OUTPUT ${QEMU_BINARY_DIR}/bin/qemu-img
    COMMAND bash ${QEMU_SOURCE_DIR}/qemu-img-fetcher.sh ${QEMU_SOURCE_DIR} ${QEMU_BINARY_DIR}
    COMMAND ${CMAKE_COMMAND} -E create_symlink ${QEMU_BINARY_DIR}/bin/qemu-img ${CMAKE_BINARY_DIR}/bin/qemu-img # convenience for testing only
    )
  add_custom_target(qemu-img ALL DEPENDS ${QEMU_BINARY_DIR}/bin/qemu-img)
  install(DIRECTORY ${QEMU_BINARY_DIR}/
    DESTINATION .
    USE_SOURCE_PERMISSIONS
    COMPONENT multipassd
    )
elseif(MSVC)
  set(JSONCPP_WITH_PKGCONFIG_SUPPORT OFF CACHE BOOL "Disable pkgconfig in jsoncpp" FORCE)
  set(JSONCPP_WITH_POST_BUILD_UNITTEST OFF CACHE BOOL "Disable unit tests in jsoncpp" FORCE)
  set(JSONCPP_WITH_TESTS OFF CACHE BOOL "Disable test executables in jsoncpp lib" FORCE)
  add_subdirectory(jsoncpp)
endif()

# libssh config
add_subdirectory(libssh)

# fmt header only library
add_library(fmt INTERFACE)
target_compile_definitions(fmt INTERFACE FMT_HEADER_ONLY=1)
target_include_directories(fmt INTERFACE
  ${CMAKE_CURRENT_SOURCE_DIR}/fmt/include)

# premock header only library to mock c-functions
add_library(premock INTERFACE)
target_include_directories(premock INTERFACE
  ${CMAKE_CURRENT_SOURCE_DIR}/premock)

# scope_guard header only library
add_library(scope_guard INTERFACE)
target_include_directories(scope_guard INTERFACE
  ${CMAKE_CURRENT_SOURCE_DIR}/scope_guard)

# semver library
# Set option to disable tests, avoid a Boost dependency that is test-only
set(ENABLE_TESTS OFF CACHE BOOL "Disable tests in Semver lib" FORCE)
add_subdirectory(semver EXCLUDE_FROM_ALL)
target_include_directories(semver INTERFACE
  ${CMAKE_CURRENT_SOURCE_DIR}/semver/include)

# xz-decoder config
add_subdirectory(xz-decoder EXCLUDE_FROM_ALL)

# qhotkey config
add_subdirectory(qhotkey EXCLUDE_FROM_ALL)
